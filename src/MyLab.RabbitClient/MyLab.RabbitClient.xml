<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyLab.RabbitClient</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.AppIntegration">
            <summary>
            Contains extension methods for integration into application
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.AddRabbitConsumer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,MyLab.RabbitClient.Consuming.IRabbitConsumer)">
            <summary>
            Registers consumer for specified queue
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.AddRabbitConsumer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Registers consumer type for specified queue 
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.AddRabbitConsumer``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{``0,System.String},System.Boolean)">
            <summary>
            Registers consumer for queue which retrieve from options
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.AddRabbitConsumers``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds consumer registrar which allow to registers several consumers depends on dependent options and services
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.AddRabbitConsumers(Microsoft.Extensions.DependencyInjection.IServiceCollection,MyLab.RabbitClient.Consuming.IRabbitConsumerRegistrar)">
            <summary>
            Adds consumer registrar which allow to registers several consumers depends on dependent options and services
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.AddRabbitConsumedMessageProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds consumed message processor
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.AddRabbit(Microsoft.Extensions.DependencyInjection.IServiceCollection,MyLab.RabbitClient.RabbitConnectionStrategy)">
            <summary>
            Adds Rabbit services
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.ConfigureRabbit(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Configures Rabbit Client
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.ConfigureRabbit(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MyLab.RabbitClient.RabbitOptions})">
            <summary>
            Configures Rabbit Client
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppIntegration.AddRabbitPublishingMessageProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds processor for publishing message
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderExtensions.AddRabbit(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder)">
            <summary>
            Adds Rabbit checks
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Connection.IBackgroundRabbitConnectionManager">
            <summary>
            Manages background connection
            </summary>
        </member>
        <member name="E:MyLab.RabbitClient.Connection.IBackgroundRabbitConnectionManager.Connected">
            <summary>
            Occurred when Rabbit connected
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.IBackgroundRabbitConnectionManager.ProvideConnection">
            <summary>
            Provides established connection
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.IBackgroundRabbitConnectionManager.ConnectAsync">
            <summary>
            Initiate connection
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Connection.IRabbitChannelProvider">
            <summary>
            Provides channels
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.IRabbitChannelProvider.Provide">
            <summary>
            Provide channel using
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.IRabbitChannelProvider.Use(System.Action{RabbitMQ.Client.IModel})">
            <summary>
            Safe channel using with auto-free
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.IRabbitChannelProvider.UseAsync(System.Func{RabbitMQ.Client.IModel,System.Threading.Tasks.Task})">
            <summary>
            Safe async channel using with auto-free
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Connection.IRabbitConnectionProvider">
            <summary>
            Provides connection to RabbitMQ
            </summary>
        </member>
        <member name="E:MyLab.RabbitClient.Connection.IRabbitConnectionProvider.Reconnected">
            <summary>
            Occurs when new connection created 
            </summary>
            <remarks>
            It means that old connection no longer available
            </remarks>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.IRabbitConnectionProvider.Provide">
            <summary>
            Provides Mq connection
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Connection.LazyRabbitConnectionProvider">
            <summary>
            Manages and provides Rabbit connection
            </summary>
        </member>
        <member name="E:MyLab.RabbitClient.Connection.LazyRabbitConnectionProvider.Reconnected">
            <inheritdoc />
        </member>
        <member name="M:MyLab.RabbitClient.Connection.LazyRabbitConnectionProvider.Provide">
            <inheritdoc />
        </member>
        <member name="M:MyLab.RabbitClient.Connection.LazyRabbitConnectionProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="T:MyLab.RabbitClient.Connection.RabbitChannelProvider">
            <summary>
            Manages and provides Rabbit channels
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.RabbitChannelProvider.#ctor(MyLab.RabbitClient.Connection.IRabbitConnectionProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Connection.RabbitChannelProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.RabbitChannelProvider.Provide">
            <inheritdoc />
        </member>
        <member name="M:MyLab.RabbitClient.Connection.RabbitChannelProvider.Use(System.Action{RabbitMQ.Client.IModel})">
            <inheritdoc />
        </member>
        <member name="M:MyLab.RabbitClient.Connection.RabbitChannelProvider.UseAsync(System.Func{RabbitMQ.Client.IModel,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="T:MyLab.RabbitClient.Connection.RabbitChannelUsing">
            <summary>
            Contains RabbitMQ channel
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Connection.RabbitChannelUsing.Channel">
            <summary>
            Rabbit channel
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.RabbitChannelUsing.#ctor(RabbitMQ.Client.IModel,System.IDisposable)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Connection.RabbitChannelUsing"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.RabbitChannelUsing.Dispose">
            <inheritdoc />
        </member>
        <member name="T:MyLab.RabbitClient.Connection.RabbitNotConnectedException">
            <summary>
            Occurred when Rabbit connection is not established
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Connection.RabbitNotConnectedException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Connection.RabbitNotConnectedException"/>
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.ConsumedMessage`1">
            <summary>
            Contains consumer message data
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Consuming.ConsumedMessage`1.Queue">
            <summary>
            The queue which from message was received
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Consuming.ConsumedMessage`1.BasicProperties">
            <summary>
            The content header of the message
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Consuming.ConsumedMessage`1.Content">
            <summary>
            Deserialized message content
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.ConsumedMessage`1.#ctor(`0,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Consuming.ConsumedMessage`1"/>
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.IConsumedMessageProcessor">
            <summary>
            Processed consumed message
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.IConsumedMessageProcessor.Process(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Processes consumed message
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.IRabbitConsumer">
            <summary>
            Defines consumer logic interface
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.IRabbitConsumer.ConsumeAsync(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Override to implement consuming logic
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.IRabbitConsumerProvider">
            <summary>
            Provides consumer
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.IRabbitConsumerProvider.Provide(System.IServiceProvider)">
            <summary>
            Provides consumer logic
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.IRabbitConsumerRegistrar">
            <summary>
            Registers consumers
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.IRabbitConsumerRegistrar.Register(MyLab.RabbitClient.Consuming.IRabbitConsumerRegistry,System.IServiceProvider)">
            <summary>
            Override to register consumer into consumer registry 
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.IRabbitConsumerRegistry">
            <summary>
            Registers consumers
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.IRabbitConsumerRegistry.Register(System.String,MyLab.RabbitClient.Consuming.IRabbitConsumerProvider)">
            <summary>
            Registers consumer with specified logic for specified queue
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.OptionsConsumerRegistrar`2">
            <summary>
            Registers consumer with options
            </summary>
            <typeparam name="TOptions">options type</typeparam>
            <typeparam name="TConsumer">consumer type</typeparam>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.OptionsConsumerRegistrar`2.#ctor(System.Func{`0,System.String},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Consuming.OptionsConsumerRegistrar`2"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.OptionsConsumerRegistrar`2.Register(MyLab.RabbitClient.Consuming.IRabbitConsumerRegistry,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.RabbitConsumer`1">
            <summary>
            Provides deserialized consumed message to processing
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.RabbitConsumer`1.ConsumeAsync(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.RabbitConsumer`1.ConsumeMessageAsync(MyLab.RabbitClient.Consuming.ConsumedMessage{`0})">
            <summary>
            Override to implement consumed message processing
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.SingleConsumerProvider">
            <summary>
            Provides the one consumer always
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.SingleConsumerProvider.#ctor(MyLab.RabbitClient.Consuming.IRabbitConsumer)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Consuming.SingleConsumerProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.SingleConsumerProvider.Provide(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.SingleConsumerRegistrar">
            <summary>
            Registers  single consumer
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.SingleConsumerRegistrar.#ctor(System.String,MyLab.RabbitClient.Consuming.IRabbitConsumer)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Consuming.SingleConsumerRegistrar"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.SingleConsumerRegistrar.Register(MyLab.RabbitClient.Consuming.IRabbitConsumerRegistry,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.TypedConsumerProvider`1">
            <summary>
            Creates consumer instance with <see cref="T:System.IServiceProvider"/> and provides it
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.TypedConsumerProvider`1.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Consuming.TypedConsumerProvider`1"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.TypedConsumerProvider`1.Provide(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:MyLab.RabbitClient.Consuming.TypedConsumerRegistrar`1">
            <summary>
            Registers consumer by type
            </summary>
            <typeparam name="TConsumer">consumer type</typeparam>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.TypedConsumerRegistrar`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Consuming.TypedConsumerRegistrar`1"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Consuming.TypedConsumerRegistrar`1.Register(MyLab.RabbitClient.Consuming.IRabbitConsumerRegistry,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:MyLab.RabbitClient.HealthCheck.RabbitConnectionHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:MyLab.RabbitClient.Model.RabbitExchange">
            <summary>
            Provides abilities to work with Rabbit exchange
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitExchange.Name">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitExchange.#ctor(System.String,MyLab.RabbitClient.Connection.IRabbitChannelProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Model.RabbitExchange"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitExchange.Publish(System.Object,System.String)">
            <summary>
            Publish object as JSON message content
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitExchange.IsExists">
            <summary>
            Gets 'true' if queue exists 
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitExchange.Remove">
            <summary>
            Remove exchange
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Model.RabbitExchangeFactory">
            <summary>
            Creates Rabbit exchanges
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitExchangeFactory.Prefix">
            <summary>
            Prefix for exchange name 
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitExchangeFactory.AutoDelete">
            <summary>
            Queue that has had at least one consumer is deleted when last consumer unsubscribes
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitExchangeFactory.Durable">
            <summary>
            The queue will survive a broker restart
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitExchangeFactory.ExchangeType">
            <summary>
            Exchange type
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitExchangeFactory.#ctor(MyLab.RabbitClient.Model.RabbitExchangeType,MyLab.RabbitClient.Connection.IRabbitChannelProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Model.RabbitExchangeFactory"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitExchangeFactory.CreateWithRandomId">
            <summary>
            Creates exchange with name = {Prefix}:{Guid.NewGuid().ToString("N")}
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitExchangeFactory.CreateWithId(System.String)">
            <summary>
            Creates exchange with name = {Prefix}:{id}
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitExchangeFactory.CreateWithName(System.String)">
            <summary>
            Creates exchange  with name = {name}
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Model.RabbitExchangeType">
            <summary>
            Declare exchange types
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Model.RabbitQueue">
            <summary>
            Represent Rabbit queue
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitQueue.Name">
            <summary>
            Queue name
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueue.#ctor(System.String,MyLab.RabbitClient.Connection.IRabbitChannelProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Model.RabbitQueue"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueue.Publish(System.Object)">
            <summary>
            Publish object as JSON message content
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueue.Listen``1(System.Nullable{System.TimeSpan})">
            <summary>
            Listens next message synchronously 
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueue.BindToExchange(System.String,System.String)">
            <summary>
            Binds queue to exchange
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueue.BindToExchange(MyLab.RabbitClient.Model.RabbitExchange,System.String)">
            <summary>
            Binds queue to exchange
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueue.IsExists">
            <summary>
            Gets 'true' if queue exists 
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueue.Remove">
            <summary>
            Remove queue
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Model.RabbitQueueFactory">
            <summary>
            Creates queue
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitQueueFactory.Prefix">
            <summary>
            Prefix for queue name 
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitQueueFactory.AutoDelete">
            <summary>
            Queue that has had at least one consumer is deleted when last consumer unsubscribes
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitQueueFactory.Durable">
            <summary>
            The queue will survive a broker restart
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitQueueFactory.Exclusive">
            <summary>
            Used by only one connection and the queue will be deleted when that connection closes
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitQueueFactory.DeadLetterExchange">
            <summary>
            Specifies a dead letter exchange
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Model.RabbitQueueFactory.DeadLetterRoutingKey">
            <summary>
            Specifies a dead letter routing key
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueueFactory.CreateWithRandomId">
            <summary>
            Create queue with name = {Prefix}:{Guid.NewGuid().ToString("N")}
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueueFactory.CreateWithId(System.String)">
            <summary>
            Create queue with name = {Prefix}:{id}
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueueFactory.CreateWithName(System.String)">
            <summary>
            Create queue with name = {name}
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Model.RabbitQueueFactory.#ctor(MyLab.RabbitClient.Connection.IRabbitChannelProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Model.RabbitQueueFactory"/>
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Publishing.IPublishingMessageProcessor">
            <summary>
            Processes message before publishing
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.IPublishingMessageProcessor.Process(RabbitMQ.Client.IBasicProperties,System.Byte[]@)">
            <summary>
            Process a message
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Publishing.IRabbitPublisher">
            <summary>
            Provides abilities to publish messages
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.IRabbitPublisher.IntoDefault(System.String)">
            <summary>
            Create publish builder for target from default publish options
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.IRabbitPublisher.IntoQueue(System.String)">
            <summary>
            Create publish builder for specified queue
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.IRabbitPublisher.IntoExchange(System.String,System.String)">
            <summary>
            Create publish builder for specified exchange
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.IRabbitPublisher.Into``1(System.String)">
            <summary>
            Create publish builder for target from model referenced options
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.IRabbitPublisher.Into(System.String,System.String)">
            <summary>
            Create publish builder for target from referenced options
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Publishing.RabbitConfigIdAttribute">
            <summary>
            Specifies key for config reference
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.Publishing.RabbitConfigIdAttribute.ConfigId">
            <summary>
            Gets configuration identifier
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.RabbitConfigIdAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Publishing.RabbitConfigIdAttribute"/>
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.Publishing.RabbitPublisherBuilder">
            <summary>
            Build parameters for publishing and perform publish
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.RabbitPublisherBuilder.#ctor(MyLab.RabbitClient.Connection.IRabbitChannelProvider,System.String,System.String,System.Collections.Generic.IEnumerable{MyLab.RabbitClient.Publishing.IPublishingMessageProcessor})">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.RabbitClient.Publishing.RabbitPublisherBuilder"/>
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.RabbitPublisherBuilder.AndProperty(System.Action{RabbitMQ.Client.IBasicProperties})">
            <summary>
            Adds property assignation
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.RabbitPublisherBuilder.AndHeader(System.String,System.Object)">
            <summary>
            Add header
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.RabbitPublisherBuilder.SendJson(System.Object)">
            <summary>
            Use object as json as message content
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.RabbitPublisherBuilder.SendBinary(System.Byte[])">
            <summary>
            Use binary as message content
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.RabbitPublisherBuilder.SendString(System.String)">
            <summary>
            Use string as message content
            </summary>
        </member>
        <member name="M:MyLab.RabbitClient.Publishing.RabbitPublisherBuilder.Publish">
            <summary>
            Publish message
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.RabbitConnectionStrategy">
            <summary>
            Rabbit connection establish strategy
            </summary>
        </member>
        <member name="F:MyLab.RabbitClient.RabbitConnectionStrategy.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:MyLab.RabbitClient.RabbitConnectionStrategy.Lazy">
            <summary>
            When requested
            </summary>
        </member>
        <member name="F:MyLab.RabbitClient.RabbitConnectionStrategy.Background">
            <summary>
            In background when application started
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.RabbitOptions">
            <summary>
            Contains connection options
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.RabbitOptions.Host">
            <summary>
            Server host
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.RabbitOptions.VHost">
            <summary>
            Virtual host
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.RabbitOptions.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.RabbitOptions.User">
            <summary>
            Login user
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.RabbitOptions.Password">
            <summary>
            Login password
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.RabbitOptions.Pub">
            <summary>
            Publish options
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.RabbitOptions.DefaultPub">
            <summary>
            Default publish options
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.RabbitOptions.BackgroundRetryPeriodSec">
            <summary>
            Retry period in seconds when background connection mode
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.PublishOptions">
            <summary>
            Contains publish options
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.PublishOptions.Exchange">
            <summary>
            Target exchange
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.PublishOptions.RoutingKey">
            <summary>
            Routing key or Queue if Exchange is empty
            </summary>
        </member>
        <member name="T:MyLab.RabbitClient.IdPublishOptions">
            <summary>
            Contains publish options with identifier
            </summary>
        </member>
        <member name="P:MyLab.RabbitClient.IdPublishOptions.Id">
            <summary>
            Publish options identifier
            </summary>
        </member>
    </members>
</doc>
